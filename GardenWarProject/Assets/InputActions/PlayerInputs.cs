//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""2b795710-b287-4812-ae8b-43eb8f73991b"",
            ""actions"": [
                {
                    ""name"": ""CancelMove"",
                    ""type"": ""Button"",
                    ""id"": ""ca7f4080-26b9-4377-8429-685d79c3fa0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b7cc26a-ff6b-4dd1-a818-633a43407343"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Attack"",
            ""id"": ""e779a209-6566-4beb-904b-aec78faf816d"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""cade776d-8858-4577-82ae-2aa0479b540e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": []
        },
        {
            ""name"": ""Capacity"",
            ""id"": ""698439f3-8087-4c51-8d99-5115fa6e1253"",
            ""actions"": [
                {
                    ""name"": ""Capacity0"",
                    ""type"": ""Button"",
                    ""id"": ""3dd9532a-e0fc-4369-91a1-ada3d048afb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Capacity1"",
                    ""type"": ""Button"",
                    ""id"": ""f0ec7891-2904-4b4a-b410-426f3efbc135"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Capacity2"",
                    ""type"": ""Button"",
                    ""id"": ""5149e613-eee6-4a62-8048-6e49faf4b9eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowCapacity"",
                    ""type"": ""Button"",
                    ""id"": ""7c5a1cf3-1914-46b2-adff-2076fd1d6558"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RecalCapacity"",
                    ""type"": ""Button"",
                    ""id"": ""c127f5b8-4e5b-495a-a883-273461b1f71c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowMaxRangeIndicator"",
                    ""type"": ""Button"",
                    ""id"": ""e1b44cbe-5eb7-4046-9d05-8cfedf8ec8ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpgradeCapacity"",
                    ""type"": ""Button"",
                    ""id"": ""ba44bf19-27de-4214-89ff-00ae981af087"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51ee870a-f512-42bd-87a8-5e549a2d0c34"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capacity0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0c5895f-7a86-4ec0-a37d-36df2dd2f8cd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capacity1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9023c4ba-5907-4e90-8ea0-9568be0c0c2b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capacity2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db69bc68-247f-481c-b069-1922a634307e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowCapacity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""116dcc0c-0c51-42d8-824b-ffd1e02e4325"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RecalCapacity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3e086b5-e8eb-4031-9d43-fe99fdb3c0ca"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowMaxRangeIndicator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc7b1616-0fca-4467-ba17-f4295773f442"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpgradeCapacity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""b8a19349-aa66-4dd5-8530-973ba673d02f"",
            ""actions"": [
                {
                    ""name"": ""ActivateItem0"",
                    ""type"": ""Button"",
                    ""id"": ""505f98b0-c354-4398-a5f7-bba785fcb5f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateItem1"",
                    ""type"": ""Button"",
                    ""id"": ""a75d0200-c8f9-428a-b2b2-2dddebf835ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateItem2"",
                    ""type"": ""Button"",
                    ""id"": ""bb54462e-e0c5-4e4d-9d63-b4779d05adf8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowHideInventory"",
                    ""type"": ""Button"",
                    ""id"": ""9c1bae78-20ad-4650-8f18-6dca8a7e31ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowHideShop"",
                    ""type"": ""Button"",
                    ""id"": ""5da3651d-bad5-49a5-82ab-367f853b0c22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c49ed578-b0f1-47cb-af6d-aabccd690b2c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8032dce0-063e-462a-8fbb-2e08c000b586"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""219bc7f0-2ebd-4478-b92b-75586b1d83db"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32496955-de5e-4a8e-8614-aee2153d3b44"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowHideInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55cf922e-a410-4a8a-9dbe-2f2e5a1bf70e"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowHideShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""745bed8a-cfc0-4f8a-a3ae-b70cfb354251"",
            ""actions"": [
                {
                    ""name"": ""LockToggle"",
                    ""type"": ""Button"",
                    ""id"": ""54a45e78-fe95-4f9d-bf31-b0edcdd20b4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d00ecd55-ab7c-4100-8d0c-99e5e99eedbb"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MoveMouse"",
            ""id"": ""a7ceacff-6044-40be-a466-6447c599e434"",
            ""actions"": [
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""101c5f66-bd62-4b89-b5fd-0dcc2376f192"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""423383cc-dfaf-401e-9009-8a937d79459c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""8fa0cad7-f2a2-4ac7-a45e-95bb84d930d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""7980cbac-c2d4-4a49-b223-eb0e8cc708ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9074bc1f-6077-45bd-89cd-62bd87652634"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0003a3b0-03b5-4a22-8db0-21af37bb3959"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0208ece-a0ed-4522-bf94-6a5895d78804"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c74056ef-652c-4147-970e-358f50315a12"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold(duration=0.1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Emotes"",
            ""id"": ""14323f0b-b440-4d20-b63e-e4231fd5429d"",
            ""actions"": [
                {
                    ""name"": ""Emote1"",
                    ""type"": ""Button"",
                    ""id"": ""dac54b6b-bfd1-4508-819e-098363e1b0ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""faa4d7b0-118e-447a-80e3-057b45d0f18d"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Emote1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_CancelMove = m_Movement.FindAction("CancelMove", throwIfNotFound: true);
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_Attack = m_Attack.FindAction("Attack", throwIfNotFound: true);
        // Capacity
        m_Capacity = asset.FindActionMap("Capacity", throwIfNotFound: true);
        m_Capacity_Capacity0 = m_Capacity.FindAction("Capacity0", throwIfNotFound: true);
        m_Capacity_Capacity1 = m_Capacity.FindAction("Capacity1", throwIfNotFound: true);
        m_Capacity_Capacity2 = m_Capacity.FindAction("Capacity2", throwIfNotFound: true);
        m_Capacity_ThrowCapacity = m_Capacity.FindAction("ThrowCapacity", throwIfNotFound: true);
        m_Capacity_RecalCapacity = m_Capacity.FindAction("RecalCapacity", throwIfNotFound: true);
        m_Capacity_ShowMaxRangeIndicator = m_Capacity.FindAction("ShowMaxRangeIndicator", throwIfNotFound: true);
        m_Capacity_UpgradeCapacity = m_Capacity.FindAction("UpgradeCapacity", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_ActivateItem0 = m_Inventory.FindAction("ActivateItem0", throwIfNotFound: true);
        m_Inventory_ActivateItem1 = m_Inventory.FindAction("ActivateItem1", throwIfNotFound: true);
        m_Inventory_ActivateItem2 = m_Inventory.FindAction("ActivateItem2", throwIfNotFound: true);
        m_Inventory_ShowHideInventory = m_Inventory.FindAction("ShowHideInventory", throwIfNotFound: true);
        m_Inventory_ShowHideShop = m_Inventory.FindAction("ShowHideShop", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_LockToggle = m_Camera.FindAction("LockToggle", throwIfNotFound: true);
        // MoveMouse
        m_MoveMouse = asset.FindActionMap("MoveMouse", throwIfNotFound: true);
        m_MoveMouse_MousePos = m_MoveMouse.FindAction("MousePos", throwIfNotFound: true);
        m_MoveMouse_RightClick = m_MoveMouse.FindAction("RightClick", throwIfNotFound: true);
        m_MoveMouse_LeftClick = m_MoveMouse.FindAction("LeftClick", throwIfNotFound: true);
        m_MoveMouse_HoldRightClick = m_MoveMouse.FindAction("HoldRightClick", throwIfNotFound: true);
        // Emotes
        m_Emotes = asset.FindActionMap("Emotes", throwIfNotFound: true);
        m_Emotes_Emote1 = m_Emotes.FindAction("Emote1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_CancelMove;
    public struct MovementActions
    {
        private @PlayerInputs m_Wrapper;
        public MovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @CancelMove => m_Wrapper.m_Movement_CancelMove;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @CancelMove.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnCancelMove;
                @CancelMove.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnCancelMove;
                @CancelMove.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnCancelMove;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CancelMove.started += instance.OnCancelMove;
                @CancelMove.performed += instance.OnCancelMove;
                @CancelMove.canceled += instance.OnCancelMove;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Attack
    private readonly InputActionMap m_Attack;
    private IAttackActions m_AttackActionsCallbackInterface;
    private readonly InputAction m_Attack_Attack;
    public struct AttackActions
    {
        private @PlayerInputs m_Wrapper;
        public AttackActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Attack_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        public void SetCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_AttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public AttackActions @Attack => new AttackActions(this);

    // Capacity
    private readonly InputActionMap m_Capacity;
    private ICapacityActions m_CapacityActionsCallbackInterface;
    private readonly InputAction m_Capacity_Capacity0;
    private readonly InputAction m_Capacity_Capacity1;
    private readonly InputAction m_Capacity_Capacity2;
    private readonly InputAction m_Capacity_ThrowCapacity;
    private readonly InputAction m_Capacity_RecalCapacity;
    private readonly InputAction m_Capacity_ShowMaxRangeIndicator;
    private readonly InputAction m_Capacity_UpgradeCapacity;
    public struct CapacityActions
    {
        private @PlayerInputs m_Wrapper;
        public CapacityActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Capacity0 => m_Wrapper.m_Capacity_Capacity0;
        public InputAction @Capacity1 => m_Wrapper.m_Capacity_Capacity1;
        public InputAction @Capacity2 => m_Wrapper.m_Capacity_Capacity2;
        public InputAction @ThrowCapacity => m_Wrapper.m_Capacity_ThrowCapacity;
        public InputAction @RecalCapacity => m_Wrapper.m_Capacity_RecalCapacity;
        public InputAction @ShowMaxRangeIndicator => m_Wrapper.m_Capacity_ShowMaxRangeIndicator;
        public InputAction @UpgradeCapacity => m_Wrapper.m_Capacity_UpgradeCapacity;
        public InputActionMap Get() { return m_Wrapper.m_Capacity; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CapacityActions set) { return set.Get(); }
        public void SetCallbacks(ICapacityActions instance)
        {
            if (m_Wrapper.m_CapacityActionsCallbackInterface != null)
            {
                @Capacity0.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity0;
                @Capacity0.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity0;
                @Capacity0.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity0;
                @Capacity1.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity1;
                @Capacity1.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity1;
                @Capacity1.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity1;
                @Capacity2.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity2;
                @Capacity2.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity2;
                @Capacity2.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity2;
                @ThrowCapacity.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnThrowCapacity;
                @ThrowCapacity.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnThrowCapacity;
                @ThrowCapacity.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnThrowCapacity;
                @RecalCapacity.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnRecalCapacity;
                @RecalCapacity.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnRecalCapacity;
                @RecalCapacity.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnRecalCapacity;
                @ShowMaxRangeIndicator.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnShowMaxRangeIndicator;
                @ShowMaxRangeIndicator.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnShowMaxRangeIndicator;
                @ShowMaxRangeIndicator.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnShowMaxRangeIndicator;
                @UpgradeCapacity.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnUpgradeCapacity;
                @UpgradeCapacity.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnUpgradeCapacity;
                @UpgradeCapacity.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnUpgradeCapacity;
            }
            m_Wrapper.m_CapacityActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Capacity0.started += instance.OnCapacity0;
                @Capacity0.performed += instance.OnCapacity0;
                @Capacity0.canceled += instance.OnCapacity0;
                @Capacity1.started += instance.OnCapacity1;
                @Capacity1.performed += instance.OnCapacity1;
                @Capacity1.canceled += instance.OnCapacity1;
                @Capacity2.started += instance.OnCapacity2;
                @Capacity2.performed += instance.OnCapacity2;
                @Capacity2.canceled += instance.OnCapacity2;
                @ThrowCapacity.started += instance.OnThrowCapacity;
                @ThrowCapacity.performed += instance.OnThrowCapacity;
                @ThrowCapacity.canceled += instance.OnThrowCapacity;
                @RecalCapacity.started += instance.OnRecalCapacity;
                @RecalCapacity.performed += instance.OnRecalCapacity;
                @RecalCapacity.canceled += instance.OnRecalCapacity;
                @ShowMaxRangeIndicator.started += instance.OnShowMaxRangeIndicator;
                @ShowMaxRangeIndicator.performed += instance.OnShowMaxRangeIndicator;
                @ShowMaxRangeIndicator.canceled += instance.OnShowMaxRangeIndicator;
                @UpgradeCapacity.started += instance.OnUpgradeCapacity;
                @UpgradeCapacity.performed += instance.OnUpgradeCapacity;
                @UpgradeCapacity.canceled += instance.OnUpgradeCapacity;
            }
        }
    }
    public CapacityActions @Capacity => new CapacityActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_ActivateItem0;
    private readonly InputAction m_Inventory_ActivateItem1;
    private readonly InputAction m_Inventory_ActivateItem2;
    private readonly InputAction m_Inventory_ShowHideInventory;
    private readonly InputAction m_Inventory_ShowHideShop;
    public struct InventoryActions
    {
        private @PlayerInputs m_Wrapper;
        public InventoryActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateItem0 => m_Wrapper.m_Inventory_ActivateItem0;
        public InputAction @ActivateItem1 => m_Wrapper.m_Inventory_ActivateItem1;
        public InputAction @ActivateItem2 => m_Wrapper.m_Inventory_ActivateItem2;
        public InputAction @ShowHideInventory => m_Wrapper.m_Inventory_ShowHideInventory;
        public InputAction @ShowHideShop => m_Wrapper.m_Inventory_ShowHideShop;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @ActivateItem0.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem0;
                @ActivateItem0.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem0;
                @ActivateItem0.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem0;
                @ActivateItem1.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem1;
                @ActivateItem1.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem1;
                @ActivateItem1.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem1;
                @ActivateItem2.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem2;
                @ActivateItem2.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem2;
                @ActivateItem2.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem2;
                @ShowHideInventory.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideInventory;
                @ShowHideInventory.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideInventory;
                @ShowHideInventory.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideInventory;
                @ShowHideShop.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideShop;
                @ShowHideShop.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideShop;
                @ShowHideShop.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideShop;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ActivateItem0.started += instance.OnActivateItem0;
                @ActivateItem0.performed += instance.OnActivateItem0;
                @ActivateItem0.canceled += instance.OnActivateItem0;
                @ActivateItem1.started += instance.OnActivateItem1;
                @ActivateItem1.performed += instance.OnActivateItem1;
                @ActivateItem1.canceled += instance.OnActivateItem1;
                @ActivateItem2.started += instance.OnActivateItem2;
                @ActivateItem2.performed += instance.OnActivateItem2;
                @ActivateItem2.canceled += instance.OnActivateItem2;
                @ShowHideInventory.started += instance.OnShowHideInventory;
                @ShowHideInventory.performed += instance.OnShowHideInventory;
                @ShowHideInventory.canceled += instance.OnShowHideInventory;
                @ShowHideShop.started += instance.OnShowHideShop;
                @ShowHideShop.performed += instance.OnShowHideShop;
                @ShowHideShop.canceled += instance.OnShowHideShop;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_LockToggle;
    public struct CameraActions
    {
        private @PlayerInputs m_Wrapper;
        public CameraActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @LockToggle => m_Wrapper.m_Camera_LockToggle;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @LockToggle.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnLockToggle;
                @LockToggle.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnLockToggle;
                @LockToggle.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnLockToggle;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LockToggle.started += instance.OnLockToggle;
                @LockToggle.performed += instance.OnLockToggle;
                @LockToggle.canceled += instance.OnLockToggle;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // MoveMouse
    private readonly InputActionMap m_MoveMouse;
    private IMoveMouseActions m_MoveMouseActionsCallbackInterface;
    private readonly InputAction m_MoveMouse_MousePos;
    private readonly InputAction m_MoveMouse_RightClick;
    private readonly InputAction m_MoveMouse_LeftClick;
    private readonly InputAction m_MoveMouse_HoldRightClick;
    public struct MoveMouseActions
    {
        private @PlayerInputs m_Wrapper;
        public MoveMouseActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePos => m_Wrapper.m_MoveMouse_MousePos;
        public InputAction @RightClick => m_Wrapper.m_MoveMouse_RightClick;
        public InputAction @LeftClick => m_Wrapper.m_MoveMouse_LeftClick;
        public InputAction @HoldRightClick => m_Wrapper.m_MoveMouse_HoldRightClick;
        public InputActionMap Get() { return m_Wrapper.m_MoveMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveMouseActions set) { return set.Get(); }
        public void SetCallbacks(IMoveMouseActions instance)
        {
            if (m_Wrapper.m_MoveMouseActionsCallbackInterface != null)
            {
                @MousePos.started -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnMousePos;
                @MousePos.performed -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnMousePos;
                @MousePos.canceled -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnMousePos;
                @RightClick.started -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnRightClick;
                @LeftClick.started -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnLeftClick;
                @HoldRightClick.started -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnHoldRightClick;
                @HoldRightClick.performed -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnHoldRightClick;
                @HoldRightClick.canceled -= m_Wrapper.m_MoveMouseActionsCallbackInterface.OnHoldRightClick;
            }
            m_Wrapper.m_MoveMouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @HoldRightClick.started += instance.OnHoldRightClick;
                @HoldRightClick.performed += instance.OnHoldRightClick;
                @HoldRightClick.canceled += instance.OnHoldRightClick;
            }
        }
    }
    public MoveMouseActions @MoveMouse => new MoveMouseActions(this);

    // Emotes
    private readonly InputActionMap m_Emotes;
    private IEmotesActions m_EmotesActionsCallbackInterface;
    private readonly InputAction m_Emotes_Emote1;
    public struct EmotesActions
    {
        private @PlayerInputs m_Wrapper;
        public EmotesActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Emote1 => m_Wrapper.m_Emotes_Emote1;
        public InputActionMap Get() { return m_Wrapper.m_Emotes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EmotesActions set) { return set.Get(); }
        public void SetCallbacks(IEmotesActions instance)
        {
            if (m_Wrapper.m_EmotesActionsCallbackInterface != null)
            {
                @Emote1.started -= m_Wrapper.m_EmotesActionsCallbackInterface.OnEmote1;
                @Emote1.performed -= m_Wrapper.m_EmotesActionsCallbackInterface.OnEmote1;
                @Emote1.canceled -= m_Wrapper.m_EmotesActionsCallbackInterface.OnEmote1;
            }
            m_Wrapper.m_EmotesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Emote1.started += instance.OnEmote1;
                @Emote1.performed += instance.OnEmote1;
                @Emote1.canceled += instance.OnEmote1;
            }
        }
    }
    public EmotesActions @Emotes => new EmotesActions(this);
    public interface IMovementActions
    {
        void OnCancelMove(InputAction.CallbackContext context);
    }
    public interface IAttackActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface ICapacityActions
    {
        void OnCapacity0(InputAction.CallbackContext context);
        void OnCapacity1(InputAction.CallbackContext context);
        void OnCapacity2(InputAction.CallbackContext context);
        void OnThrowCapacity(InputAction.CallbackContext context);
        void OnRecalCapacity(InputAction.CallbackContext context);
        void OnShowMaxRangeIndicator(InputAction.CallbackContext context);
        void OnUpgradeCapacity(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnActivateItem0(InputAction.CallbackContext context);
        void OnActivateItem1(InputAction.CallbackContext context);
        void OnActivateItem2(InputAction.CallbackContext context);
        void OnShowHideInventory(InputAction.CallbackContext context);
        void OnShowHideShop(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnLockToggle(InputAction.CallbackContext context);
    }
    public interface IMoveMouseActions
    {
        void OnMousePos(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnHoldRightClick(InputAction.CallbackContext context);
    }
    public interface IEmotesActions
    {
        void OnEmote1(InputAction.CallbackContext context);
    }
}
